name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: linux-x64
            runs-on: ubuntu-latest
          - os: ubuntu-latest
            target: linux-arm64
            runs-on: ubuntu-latest
          # macOS
          - os: macos-latest
            target: darwin-x64
            runs-on: macos-latest
          - os: macos-latest
            target: darwin-arm64
            runs-on: macos-latest
          # Windows
          - os: windows-latest
            target: windows-x64
            runs-on: windows-latest
    
    runs-on: ${{ matrix.runs-on }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          distribution: graalvm-community
          java-version: '24.0.2'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@12.5
        with:
          cli: latest
      
      - name: Build native image
        shell: bash
        run: |
          # Create classpath
          CLASSPATH=$(clojure -Spath)
          
          # Build native image
          native-image \
            -cp "$CLASSPATH" \
            --no-fallback \
            --initialize-at-build-time \
            -H:Name=cordsync-${{ matrix.target }} \
            -H:+ReportExceptionStackTraces \
            sync
      
      - name: Test binary (Unix)
        if: runner.os != 'Windows'
        run: |
          ./cordsync-${{ matrix.target }} --help
      
      - name: Test binary (Windows)
        if: runner.os == 'Windows'
        run: |
          ./cordsync-${{ matrix.target }}.exe --help
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cordsync-${{ matrix.target }}
          path: |
            cordsync-${{ matrix.target }}
            cordsync-${{ matrix.target }}.exe
  
  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        run: |
          for artifact in cordsync-*; do
            if [ -d "$artifact" ]; then
              cd "$artifact"
              for file in *; do
                echo "Uploading $file"
                gh release upload ${{ github.ref_name }} "$file" --clobber
              done
              cd ..
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}